import React, { useState } from 'react';
import {
  Card,
  CardContent,
  CardMedia,
  Typography,
  IconButton,
  CardActions,
  Box,
  Tooltip,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import FavoriteIcon from '@mui/icons-material/Favorite';
import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';
import InfoIcon from '@mui/icons-material/Info';
import ImageIcon from '@mui/icons-material/Image';
import { useFavorites } from '../context/FavoritesContext';

const BookCard = ({ book }) => {
  const navigate = useNavigate();
  const { isFavorite, toggleFavorite } = useFavorites();
  const [imageError, setImageError] = useState(false);

  const {
    id,
    volumeInfo: {
      title,
      authors = ['Unknown Author'],
      description = 'No description available',
      imageLinks = {},
    } = {},
  } = book;

  const handleImageError = () => {
    setImageError(true);
  };

  const truncateText = (text, maxLength) => {
    if (!text || text.length <= maxLength) return text;
    return text.substr(0, maxLength) + '...';
  };

  return (
    <Card 
      sx={{ 
        width: '100%',
        height: '100%',
        display: 'flex', 
        flexDirection: 'column',
        transition: 'all 0.3s ease',
        '&:hover': {
          transform: 'translateY(-8px)',
          boxShadow: (theme) => theme.shadows[8],
          '& .book-image': {
            transform: 'scale(1.05)'
          }
        },
        borderRadius: 2,
        overflow: 'hidden',
        bgcolor: 'background.paper',
      }}
    >
      <Box 
        sx={{ 
          position: 'relative',
          paddingTop: '150%',
          bgcolor: 'grey.100',
          overflow: 'hidden'
        }}
      >
        {!imageError ? (
          <CardMedia
            component="img"
            className="book-image"
            image={imageLinks.thumbnail || imageLinks.smallThumbnail}
            alt={title}
            onError={handleImageError}
            sx={{ 
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              height: '100%',
              objectFit: 'cover',
              transition: 'transform 0.3s ease',
            }}
          />
        ) : (
          <Box
            sx={{
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              justifyContent: 'center',
              color: 'text.secondary',
              p: 3,
              textAlign: 'center'
            }}
          >
            <ImageIcon sx={{ fontSize: 60, mb: 2, opacity: 0.5 }} />
            <Typography variant="caption" sx={{ opacity: 0.8 }}>
              Cover image not available
            </Typography>
          </Box>
        )}
      </Box>

      <CardContent sx={{ flexGrow: 1, p: 2 }}>
        <Typography 
          variant="h6" 
          component="h2" 
          sx={{ 
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            display: '-webkit-box',
            WebkitLineClamp: 2,
            WebkitBoxOrient: 'vertical',
            lineHeight: 1.3,
            fontWeight: 600,
            mb: 1
          }}
        >
          {truncateText(title, 50)}
        </Typography>
        <Typography 
          variant="subtitle2" 
          color="text.secondary"
          sx={{
            mb: 1.5,
            fontStyle: 'italic',
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap'
          }}
        >
          {authors.join(', ')}
        </Typography>
        <Typography 
          variant="body2" 
          color="text.secondary" 
          sx={{
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            display: '-webkit-box',
            WebkitLineClamp: 3,
            WebkitBoxOrient: 'vertical',
            lineHeight: 1.5,
            opacity: 0.8
          }}
        >
          {truncateText(description, 150)}
        </Typography>
      </CardContent>

      <CardActions 
        sx={{ 
          justifyContent: 'space-between', 
          px: 2, 
          pb: 2,
          borderTop: 1,
          borderColor: 'divider'
        }}
      >
        <Tooltip title={isFavorite(id) ? "Remove from favorites" : "Add to favorites"}>
          <IconButton 
            onClick={(e) => {
              e.stopPropagation();
              toggleFavorite(book);
            }}
            color="secondary"
            size="medium"
            sx={{
              '&:hover': {
                transform: 'scale(1.1)'
              }
            }}
          >
            {isFavorite(id) ? <FavoriteIcon /> : <FavoriteBorderIcon />}
          </IconButton>
        </Tooltip>
        <Tooltip title="View details">
          <IconButton 
            onClick={() => navigate(`/book/${id}`)}
            color="primary"
            size="medium"
            sx={{
              '&:hover': {
                transform: 'scale(1.1)'
              }
            }}
          >
            <InfoIcon />
          </IconButton>
        </Tooltip>
      </CardActions>
    </Card>
  );
};

export default BookCard;