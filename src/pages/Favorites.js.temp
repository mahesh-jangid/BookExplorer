import React, { useState } from 'react';
import {
  Box,
  Typography,
  Grid,
  Paper,
  InputAdornment,
  TextField,
  IconButton,
  Menu,
  MenuItem,
  Button,
  Fade,
  Container,
} from '@mui/material';
import {
  Search as SearchIcon,
  Sort as SortIcon,
  FilterList as FilterIcon,
} from '@mui/icons-material';
import { useFavorites } from '../context/FavoritesContext';
import BookCard from '../components/BookCard';
import { motion } from 'framer-motion';

const Favorites = () => {
  const { favorites } = useFavorites();
  const [searchQuery, setSearchQuery] = useState('');
  const [sortAnchorEl, setSortAnchorEl] = useState(null);
  const [filterAnchorEl, setFilterAnchorEl] = useState(null);
  const [sortBy, setSortBy] = useState('dateAdded');
  const [filterBy, setFilterBy] = useState('all');

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1
    }
  };

  const handleSortClick = (event) => setSortAnchorEl(event.currentTarget);
  const handleFilterClick = (event) => setFilterAnchorEl(event.currentTarget);
  const handleSortClose = () => setSortAnchorEl(null);
  const handleFilterClose = () => setFilterAnchorEl(null);

  const handleSortSelect = (value) => {
    setSortBy(value);
    handleSortClose();
  };

  const handleFilterSelect = (value) => {
    setFilterBy(value);
    handleFilterClose();
  };

  const filteredBooks = favorites.filter((book) => {
    const matchesSearch = searchQuery.toLowerCase() === '' ||
      book.volumeInfo.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      book.volumeInfo.authors?.some(author => 
        author.toLowerCase().includes(searchQuery.toLowerCase()));

    const matchesFilter = filterBy === 'all' ||
      book.volumeInfo.categories?.includes(filterBy);

    return matchesSearch && matchesFilter;
  });

  const sortedBooks = [...filteredBooks].sort((a, b) => {
    switch (sortBy) {
      case 'title':
        return a.volumeInfo.title.localeCompare(b.volumeInfo.title);
      case 'author':
        const authorA = a.volumeInfo.authors?.[0] || '';
        const authorB = b.volumeInfo.authors?.[0] || '';
        return authorA.localeCompare(authorB);
      case 'dateAdded':
      default:
        return 0;
    }
  });

  const categories = [...new Set(favorites.flatMap(book => 
    book.volumeInfo.categories || []))];

  return (
    <Container maxWidth="xl" sx={{ py: 4 }}>
      <Box sx={{ px: { xs: 2, sm: 3 } }}>
        <Typography
          variant="h4"
          component="h1"
          gutterBottom
          sx={{
            fontWeight: 600,
            textAlign: { xs: 'center', sm: 'left' },
            mb: 4
          }}
        >
          My Favorite Books
        </Typography>

        <Paper 
          elevation={0} 
          sx={{ 
            p: 2, 
            mb: 4, 
            backgroundColor: 'background.paper',
            borderRadius: 2,
            border: 1,
            borderColor: 'divider'
          }}
        >
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} sm={6} md={8}>
              <TextField
                fullWidth
                size="medium"
                variant="outlined"
                placeholder="Search in favorites..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon />
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
            <Grid item xs={6} sm={3} md={2}>
              <Button
                fullWidth
                variant="outlined"
                startIcon={<SortIcon />}
                onClick={handleSortClick}
                sx={{ height: '56px' }}
              >
                Sort
              </Button>
              <Menu
                anchorEl={sortAnchorEl}
                open={Boolean(sortAnchorEl)}
                onClose={handleSortClose}
                TransitionComponent={Fade}
              >
                <MenuItem 
                  onClick={() => handleSortSelect('title')}
                  selected={sortBy === 'title'}
                >
                  By Title
                </MenuItem>
                <MenuItem 
                  onClick={() => handleSortSelect('author')}
                  selected={sortBy === 'author'}
                >
                  By Author
                </MenuItem>
                <MenuItem 
                  onClick={() => handleSortSelect('dateAdded')}
                  selected={sortBy === 'dateAdded'}
                >
                  By Date Added
                </MenuItem>
              </Menu>
            </Grid>
            <Grid item xs={6} sm={3} md={2}>
              <Button
                fullWidth
                variant="outlined"
                startIcon={<FilterIcon />}
                onClick={handleFilterClick}
                sx={{ height: '56px' }}
              >
                Filter
              </Button>
              <Menu
                anchorEl={filterAnchorEl}
                open={Boolean(filterAnchorEl)}
                onClose={handleFilterClose}
                TransitionComponent={Fade}
              >
                <MenuItem 
                  onClick={() => handleFilterSelect('all')}
                  selected={filterBy === 'all'}
                >
                  All Categories
                </MenuItem>
                {categories.map((category) => (
                  <MenuItem
                    key={category}
                    onClick={() => handleFilterSelect(category)}
                    selected={filterBy === category}
                  >
                    {category}
                  </MenuItem>
                ))}
              </Menu>
            </Grid>
          </Grid>
        </Paper>

        {sortedBooks.length === 0 ? (
          <Box 
            sx={{ 
              textAlign: 'center', 
              py: 8,
              px: 2,
              bgcolor: 'background.paper',
              borderRadius: 2,
              border: 1,
              borderColor: 'divider'
            }}
          >
            <Typography variant="h6" color="text.secondary" gutterBottom>
              {favorites.length === 0 
                ? "You haven't added any favorites yet!"
                : "No books match your search criteria."}
            </Typography>
            {favorites.length === 0 && (
              <Typography variant="body1" color="text.secondary">
                Start by adding books to your favorites while browsing the library.
              </Typography>
            )}
          </Box>
        ) : (
          <Box
            component={motion.div}
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            sx={{
              display: 'grid',
              gridTemplateColumns: {
                xs: '1fr',
                sm: 'repeat(2, 1fr)',
                md: 'repeat(3, 1fr)'
              },
              gap: 3
            }}
          >
            {sortedBooks.map((book) => (
              <Box
                key={book.id}
                component={motion.div}
                variants={itemVariants}
              >
                <BookCard book={book} />
              </Box>
            ))}
          </Box>
        )}
      </Box>
    </Container>
  );
};

export default Favorites;